type Query {
  users(queryName: String, id: ID): [User!]!
  posts(queryContent: String, id: ID): [Post!]!
  comments(queryText: String, id: ID): [Comment!]!
}

type Mutation {
  addPost(data: AddPostInput!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  deletePost(id: ID!): Post!

  addComment(data: AddCommentInput!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!

  addUser(data: AddUserInput!): User!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  deleteUser(id: ID!): User!
}

type Subscription {
  comment(postId: ID!): CommentSubscriotionPayload!
  post: PostSubscriptionPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}

type CommentSubscriotionPayload {
  mutation: MutationType!
  data: Comment!
}

input AddPostInput {
  title: String!,
  body: String!,
  published: Boolean!,
  author: ID!
}

input AddCommentInput {
  text: String!,
  author: ID!,
  post: ID!
}

input AddUserInput {
  name: String!,
  email: String!,
  age: Int
}

input UpdateCommentInput {
  text: String,
}

input UpdateUserInput {
  name: String,
  email: String,
  age: Int
}

input UpdatePostInput {
  title: String,
  body: String,
  published: Boolean,
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}